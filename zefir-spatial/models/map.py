import enum

from config import settings
from db.base_class import Base
from geoalchemy2 import Geometry
from sqlalchemy import (
    Column,
    ForeignKey,
    Index,
    Integer,
    LargeBinary,
    SmallInteger,
    String,
)
from sqlalchemy.ext.declarative import declared_attr


class Layer(enum.Enum):
    GAS = 0
    DISTRICT_HEATING = 1


class Map(Base):
    id = Column(Integer, primary_key=True)
    layer = Column(SmallInteger, ForeignKey("kiutlayer.id", ondelete="CASCADE"))
    # Alembic doesn't know about the autogenerated spatial_index.
    # Set it false here and create it in __table_args__ :(
    geom = Column(Geometry("Polygon", spatial_index=False, srid=settings.DB_SRID))  # type: ignore
    image = Column(LargeBinary)
    url = Column(String)
    terc = Column(String(7))
    import_id = Column(Integer, ForeignKey("import_metadata.id", ondelete="CASCADE"))

    @declared_attr
    def __table_args__(cls):
        return (
            Index(
                "idx_{}_geom".format(cls.__tablename__),
                "geom",
                postgresql_using="gist",
            ),
        )
